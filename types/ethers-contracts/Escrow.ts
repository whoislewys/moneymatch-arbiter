/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Escrow {
  export type PlayerStruct = {
    id: PromiseOrValue<string>;
    publicAddress: PromiseOrValue<string>;
  };

  export type PlayerStructOutput = [string, string] & {
    id: string;
    publicAddress: string;
  };
}

export interface EscrowInterface extends utils.Interface {
  functions: {
    "claimWinnings()": FunctionFragment;
    "deposit(string)": FunctionFragment;
    "endGame(string)": FunctionFragment;
    "startGame()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimWinnings"
      | "deposit"
      | "endGame"
      | "startGame"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimWinnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "endGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "startGame", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;

  events: {
    "GameEnded(address)": EventFragment;
    "GameStarted(tuple,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
}

export interface GameEndedEventObject {
  winner: string;
}
export type GameEndedEvent = TypedEvent<[string], GameEndedEventObject>;

export type GameEndedEventFilter = TypedEventFilter<GameEndedEvent>;

export interface GameStartedEventObject {
  player1: Escrow.PlayerStructOutput;
  player2: Escrow.PlayerStructOutput;
}
export type GameStartedEvent = TypedEvent<
  [Escrow.PlayerStructOutput, Escrow.PlayerStructOutput],
  GameStartedEventObject
>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimWinnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _playerId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endGame(
      _winnerId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimWinnings(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _playerId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endGame(
    _winnerId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimWinnings(overrides?: CallOverrides): Promise<void>;

    deposit(
      _playerId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    endGame(
      _winnerId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startGame(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "GameEnded(address)"(winner?: null): GameEndedEventFilter;
    GameEnded(winner?: null): GameEndedEventFilter;

    "GameStarted(tuple,tuple)"(
      player1?: null,
      player2?: null
    ): GameStartedEventFilter;
    GameStarted(player1?: null, player2?: null): GameStartedEventFilter;
  };

  estimateGas: {
    claimWinnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _playerId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endGame(
      _winnerId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimWinnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _playerId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endGame(
      _winnerId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
